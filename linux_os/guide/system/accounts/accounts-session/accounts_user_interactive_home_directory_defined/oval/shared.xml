<def-group oval_version="5.11">
  <definition class="compliance" id="accounts_user_interactive_home_directory_defined" version="1">
    <metadata>
      <title>All Interactive Users Must Have A Home Directory Defined</title>
      <affected family="unix">
        <platform>multi_platform_debian</platform>
        <platform>multi_platform_fedora</platform>
        <platform>multi_platform_ol</platform>
        <platform>multi_platform_rhel</platform>
        <platform>multi_platform_sle</platform>
        <platform>multi_platform_ubuntu</platform>
      </affected>
      <description>Assign home directories to all interactive users that currently do not
    have a home directory assigned.</description>
    </metadata>

    <criteria>
      <criterion test_ref="test_accounts_user_interactive_home_directory_defined" />
    </criteria>
  </definition>

  <!-- OVAL object to collect content of /etc/passwd file -->
  <ind:textfilecontent54_object id="object_get_passwd_paths" version="1">
    <ind:filepath>/etc/passwd</ind:filepath>
    <!-- interactive users home path with shell!=nologin from /etc/passwd (6th column) captured as subexpression of this object -->
    <ind:pattern operation="pattern match">.*:x:[0-9]{4,}:[0-9]+:.*:(.*):(?!.*nologin)</ind:pattern>
    <ind:instance operation="greater than or equal" datatype="int">1</ind:instance>
  </ind:textfilecontent54_object>

  <!-- OVAL variable to hold all the different paths from /etc/passwd -->
  <local_variable id="var_string_passwd_paths" comment="Paths from /etc/passwd" datatype="string" version="1">
    <object_component item_field="subexpression" object_ref="object_get_passwd_paths" />
  </local_variable>

  <unix:file_object comment="Directories that exist and are defined in passwd" id="object_get_directories_defined_in_passwd" version="1">
    <unix:behaviors recurse="directories" recurse_direction="down" max_depth="-1" recurse_file_system="local" />
    <unix:path operation="equals">/</unix:path>
    <unix:filename xsi:nil="true"/>
    <filter action="include">state_defined_passwd</filter>
    <!-- don't search /proc, /sys, and some special files from /selinux -->
    <filter action="exclude">state_file_permissions_unauthorized_world_write_exclude_special_selinux_files</filter>
    <filter action="exclude">state_file_permissions_unauthorized_world_write_exclude_proc</filter>
    <filter action="exclude">state_file_permissions_unauthorized_world_write_exclude_sys</filter>
  </unix:file_object>

  <!-- OVAL variable to hold the count of paths that exist and are defined in /etc/passwd -->
  <local_variable id="variable_count_of_paths" datatype="int" version="1"
  comment="Count of unique paths that exist and are defined in passwd">
    <count>
      <unique>
        <object_component item_field="path" object_ref="object_get_directories_defined_in_passwd" />
      </unique>
    </count>
  </local_variable>

  <!-- Turn the OVAL variable representing count of paths into OVAL object
       (for use in <variable_test> below)-->
  <ind:variable_object id="object_count_of_paths" version="1">
    <ind:var_ref>variable_count_of_paths</ind:var_ref>
  </ind:variable_object>

  <!-- OVAL variable to hold the count of unique home paths defined in /etc/passwd -->
  <local_variable id="variable_count_of_passwd_paths" datatype="int" version="1"
  comment="Count of unique user home path rows retrieved from /etc/passwd">
    <count>
      <unique>
        <object_component item_field="subexpression" object_ref="object_get_passwd_paths" />
      </unique>
    </count>
  </local_variable>

  <!-- Create OVAL state from count of unique user paths variable (to be used in
       <variable_test> below -->
  <ind:variable_state id="state_count_of_passwd_paths" version="1">
    <ind:value var_ref="variable_count_of_passwd_paths" datatype="int"
    operation="equals" var_check="at least one" />
  </ind:variable_state>

  <!-- Check if the current path is defined in passwd -->
  <unix:file_state id="state_defined_passwd" version="1">
    <unix:path operation="equals" var_ref="var_string_passwd_paths" var_check="at least one" />
  </unix:file_state>

  <!-- Check if count of all the different paths defined in /etc/passwd matches the count
       of all unique paths that exist and are defined in /etc/passwd -->
  <ind:variable_test id="test_accounts_user_interactive_home_directory_defined" check="all" check_existence="all_exist"
  comment="number of paths defined in passwd should be equal to number of paths that exist and are defined in passwd" version="1">
    <ind:object object_ref="object_count_of_paths" />
    <ind:state state_ref="state_count_of_passwd_paths" />
  </ind:variable_test>



</def-group>
