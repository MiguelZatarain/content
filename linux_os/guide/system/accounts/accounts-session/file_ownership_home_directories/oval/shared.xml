<def-group>
  <definition class="compliance" id="file_ownership_home_directories" version="1">
    <metadata>
      <title>All Interactive User Home Directories Must Be Owned By The Primary User</title>
      <affected family="unix">
        <platform>multi_platform_all</platform>
        <platform>multi_platform_sle</platform>
      </affected>
      <description>All Interactive User Home Directories Must Be Owned By The Primary User.</description>
    </metadata>
    <criteria operator="AND">
    <!-- Check if all user home directories exist. -->
      <criterion test_ref="test_accounts_user_interactive_home_directory_defined" />
    <!-- Check ownership -->
      <criterion comment="home directories" test_ref="test_file_ownership_home_directories"/>
    </criteria>
  </definition>


  <!-- Check if the number of unique uids in passwd equals the number of home directories with unique ownership -->
  <ind:variable_test id="test_file_ownership_home_directories" check="all" check_existence="all_exist"
  comment="number of paths defined in passwd should be equal to number of paths that exist and are defined in passwd" version="1">
    <ind:object object_ref="object_count_of_objects" />
    <ind:state state_ref="state_count_of_passwd_uids" />
  </ind:variable_test>




    <!-- OVAL object to collect content of /etc/passwd file -->
  <ind:textfilecontent54_object id="object_file_ownership_home_directories_get_passwd_paths" version="1">
    <ind:filepath>/etc/passwd</ind:filepath>
    <!-- interactive users home path with shell!=nologin from /etc/passwd (6th column) captured as subexpression of this object -->
    <ind:pattern operation="pattern match">.*:x:[0-9]{4,}:[0-9]+:.*:(.*):(?!.*nologin)</ind:pattern>
    <ind:instance operation="greater than or equal" datatype="int">1</ind:instance>
  </ind:textfilecontent54_object>

  <!-- OVAL variable to hold all the different paths from /etc/passwd -->
  <local_variable id="var_file_ownership_home_directories_string_passwd_paths" comment="Paths from /etc/passwd" datatype="string" version="1">
    <object_component item_field="subexpression" object_ref="object_file_ownership_home_directories_get_passwd_paths" />
  </local_variable>




    <!-- OVAL object to collect content of /etc/passwd file -->
  <ind:textfilecontent54_object id="object_file_ownership_home_directories_get_passwd_uid" version="1">
    <ind:filepath>/etc/passwd</ind:filepath>
    <!-- interactive users uids with shell!=nologin from /etc/passwd (6th column) captured as subexpression of this object -->
    <ind:pattern operation="pattern match">.*:x:([0-9]{4,}):[0-9]+:.*:.*:(?!.*nologin)</ind:pattern>
    <ind:instance operation="greater than or equal" datatype="int">1</ind:instance>
  </ind:textfilecontent54_object>

  <!-- OVAL variable to hold all the different uids from /etc/passwd -->
  <local_variable id="var_file_ownership_home_directories_get_passwd_uid" comment="Paths from /etc/passwd" datatype="int" version="1">
    <object_component item_field="subexpression" object_ref="object_file_ownership_home_directories_get_passwd_uid" />
  </local_variable>

  <!-- OVAL variable to hold the count of unique uids defined in /etc/passwd -->
  <local_variable id="variable_count_of_passwd_paths_file_ownership_home_directories" datatype="int" version="1"
  comment="Count of unique uid rows retrieved from /etc/passwd">
    <count>
      <unique>
        <object_component item_field="subexpression" object_ref="object_file_ownership_home_directories_get_passwd_uid" />
      </unique>
    </count>
  </local_variable>

  <!-- Create OVAL state from count of unique user uid variable (to be used in
       <variable_test> -->
  <ind:variable_state id="state_count_of_passwd_uids" version="1">
    <ind:value var_ref="variable_count_of_passwd_paths_file_ownership_home_directories" datatype="int"
    operation="equals" var_check="at least one" />
  </ind:variable_state>



  <!-- Get directories defined in passwd with owner defined in passwd -->
  <unix:file_object comment="Directories that exist and are defined in passwd" id="object_file_ownership_home_directories_defined_in_passwd" version="1">
    <unix:behaviors recurse="directories" recurse_direction="down" max_depth="-1" recurse_file_system="local" />
    <unix:path operation="equals">/</unix:path>
    <unix:filename xsi:nil="true"/>
    <filter action="include">state_file_ownership_home_directories_defined_passwd</filter>
    <filter action="include">state_home_dirs_wrong_own</filter>
    <!-- don't search /proc, /sys, and some special files from /selinux -->
    <filter action="exclude">state_file_permissions_unauthorized_world_write_exclude_special_selinux_files</filter>
    <filter action="exclude">state_file_permissions_unauthorized_world_write_exclude_proc</filter>
    <filter action="exclude">state_file_permissions_unauthorized_world_write_exclude_sys</filter>
  </unix:file_object>

  <!-- OVAL variable to hold the count of paths that exist and are defined in /etc/passwd -->
  <local_variable id="variable_count_of_objects" datatype="int" version="1"
  comment="Count of unique paths that exist and are defined in passwd">
    <count>
      <unique>
        <object_component item_field="user_id" object_ref="object_file_ownership_home_directories_defined_in_passwd" />
      </unique>
    </count>
  </local_variable>

  <!-- Turn the OVAL variable representing count of paths into OVAL object
       (for use in <variable_test> below)-->
  <ind:variable_object id="object_count_of_objects" version="1">
    <ind:var_ref>variable_count_of_objects</ind:var_ref>
  </ind:variable_object>


  <!-- Check if the current path is defined in passwd -->
  <unix:file_state id="state_file_ownership_home_directories_defined_passwd" version="1">
    <unix:path operation="equals" var_ref="var_file_ownership_home_directories_string_passwd_paths" var_check="at least one" />
  </unix:file_state>

  <!-- Check if the current directory owner in defined in passwd -->
  <unix:file_state id="state_home_dirs_wrong_own" version="1" operator="AND">
    <unix:user_id datatype="int" operation="equals" var_ref="var_file_ownership_home_directories_get_passwd_uid" var_check="at least one"/>
  </unix:file_state>

</def-group>
